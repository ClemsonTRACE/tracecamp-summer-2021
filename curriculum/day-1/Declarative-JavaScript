#+TITLE: TRACE Lecture 1
#+AUTHOR: weslev

* Getting started with NextJS + React
Let's get started by running some code in your terminal emulator...
#+begin_src shell
npx create-next-app
#+end_src

Go ahead and give your project a name.
If you cannot think of anything, just enter "my-first-project."
This will create a React application.
Now let's take a look at the file structure.
Inside of my-first-project, there is a directory called "pages." Go ahead and enter that.
There is a file called "index.js" here.
Open "index.js" in your favorite text editor (hopefully Emacs or VIM).
We will treat this file as the core of all of our code.
Go ahead and delete everything between the return parenthesise.

Inside of those parenthesise put the following...
#+begin_src html
<div>
  <h1>This is my first website</h1>
  <p>Look at how great my website is.</p>
</div>
#+end_src

Let's get this site off the ground.
In your terminal emulator type the following in the my-first-project directory...
#+begin_src shell
npm run dev
#+end_src

* JSX, Components, Props, Tailwind
Throughout this lecture, I want you to think about everything in a modular sense.
More specifically in a "functional," that is, breaking down everything into functions.
Working with JSX is intuitive in react. Every "component" returns JSX.
This is seen with where we put "This is my first website."
** JavaScript disguised as HTML aka "JSX"
Let's flex our HTML knowledge a bit.
In the function return, let's make an unordered list.
Add the following inside the div below what we have already written...

#+begin_src html
<h3>This is an unordered list</h3>
<ul>
  <li>item 1</li>
  <li>item 2</li>
  <li>item 3</li>
</ul>
#+end_src

Let's add an ordered list as well, go ahead and copy the above.

#+begin_src html
<h3>This is an ordered list</h3>
<ol>
  <li>item 1</li>
  <li>item 2</li>
  <li>item 3</li>
</ol>
#+end_src

There are many more tags online of HTML, I suggest you google them.
** TailwindCSS
Before we can use Tailwind, we have to install TailwindCSS to our project.

Go to the TailwindCSS installation guide found on the GitHub.

Alright, it's art time...
#+begin_src html
<div className="container mx-auto">
  ...HTML here
</div>
#+end_src

The "container mx-auto" will center our content.

Add the following to a div to add padding.
#+begin_src html
className="p-5"
#+end_src

You can make the text size larger like so...
#+begin_src html
className="text-3xl"
#+end_src

There are tons of different classes you can add to your JSX...

Refer to the documentation to see the scope of what you can add as far as styling.
** Components
Components are just functions that return HTML.
Create a new directory in the same directory as the index file. Call it "src."
Inside of the src directory create a new file called "Words.js."
Add the following to the Words.js file...
#+begin_src js
const Words = props => <b>{props.children}</b>
#+end_src
Now in the "index.js" file, you can go ahead and import the Words component.
#+begin_src js
import Words from "./src/Words"
#+end_src
Now you can call the component in your JSX...
#+begin_src html
<Words>
  Put your text here...
</Words>

The "props.chilren" inside of the componenet is whatever you place between those tags.
There is a lot more to components but I will save that for the project
#+end_src
* JavaScript
Let's get coding.

My approach to teach JavaScript differs from a more standard approach...

I will teach the declarative style first.

Beginners programmers will learn to code.
Advanced programmers will learn a new style of coding.

React itself is very declarative, so this knowledge is essential.

Additionally, many ES6 tools derive from declarative styles such as functional programming.

This includes commonly used utilities such as map, reduce, filter, and lambda functions.
** Welcome to programming... the declarative way!
Declarative programming is the core of React.
This approach opts for describing the results opposed to listing the steps (which is imperative).
Luckily, all you need to understand the declarative style is a basic understanding of 8th grade maths.

At the core of declarative programming are functions (more specifically lambdas... more on that later).
Think of mathematical functions: f(x), g(x)...
The inputs of a functions (which I will refer to as the domain) provide outputs (codomains).

** Thinking with functions
Let's create a function:
f(x) = x + 2
Now what happens when we insert numbers into this function?
| domain | codomain |
|      1 |        3 |
|      2 |        4 |
|      3 |        5 |

If you understand this, you are already a programmers!

Now that we know what a function is, let's represent this in code.

But first, I need to introduce you to what is called a lambda function
from the subject of lambda calculus.
Sounds scary, but it's really not. It's other name "anonymous function"
is really what it is. It is a function without a name
So let's take our function f(x) = x + 2 and make it an anonymous function
x -> x + 2
That's it, it's that simple. So how do we represent this in JavaScript?
#+begin_src js
x => x + 2
#+end_src
Seriously, it's that easy.
But what if we want to give this anonymous function an identity?
Just give it a name!
#+begin_src js
const myFirstFunc = x => x + 2
#+end_src
You can represent any mathematical function you want!
#+begin_src js
const mySecondFunc = x => x - 2
const myThirdFunc = x => x * 2
const myFourthFunc = x => x / 2
#+end_src
All you have to do to call a function is
#+begin_src js
const myFirstNumber = 1
const mySecondNumber = 2

myFirstFunc(myFirstNumber)
mySecondFunc(mySecondNumber)
#+end_src
** Arrays for days and mapping your success
Incredible, but what if I have more than 1 number I want to work with?
No problem, we have arrays for that
#+begin_src js
const myFirstArray = [1,2,3,4,5]
#+end_src

Now if you want to run an operation on one of those items just do this...
#+begin_src js
myThirdFunc(myFirstArray[3]);
#+end_src

Notice that we start counting at 0 when we index.

But wait, that's pretty time consuming, what if I want do this to the entire domain of the array?

Easy, we can use the map function to give us the codomain.

#+begin_src js
const mySecondArray = myFirstArray.map(myFirstFunc)
#+end_src

This is the power of the declarative style.
We just say "hey, I want all values to run through myFirstFunc" and it does it.
We call that abstraction.

The map method takes a higher order function and applies it to the entire domain.

These functions are great, but what if we want more than just x?
(x, y) -> x + y

Easy!
#+begin_src js
const addTogether = (x, y) => x + y
#+end_src

And we can run it like this...
#+begin_src js
addTogether(1, 3)
#+end_src
** Reduce time
Let's now talk about reduce.
Reduce is a method that takes a higher order function that needs two parameters.
It will apply this function systematically reducing the array to a single value.
We can use our addTogether function to find the sum of myFirstArray.
#+begin_src js
const myThirdArray = myFirstArray.reduce(addTogether, 0)
#+end_src
What's with the 0? Well, that is used as the initial value passed through the higher order function.
We could of used 5 in its place and it would have been equivalent the following at the beginning...
#+begin_src js
addTogether(5, myFirstArray[0])
#+end_src

** Filter: Or a Light Introduction to Boolean Algebra
Even since the days of Aristotle has logic been crucial for the sciences.

Logic is crucial for programming and especially for the method "filter."

Before we get into filter, let's talk about the very basics of logic.

- Equals (==)
If we want to assert that two things are equivalent we use the (==) operator.

- Not equals (!=)
If we want to assert that two things are not equivalent we use the (!=) operator.

- Logical NOT (!)
If true then false

The following are self explanatory...

- Greater than (>)

- Greater than or equal to (>=)

- Less than (<)
 
- Less than or equal to (<=)


- Logical AND (&&)
Logical AND is represented with two ampersands (&&).
We can illustrate how logical AND works with a truth table.

| Q | P | Q AND P |
| T | T | T       |
| T | F | F       |
| F | T | F       |
| F | F | F       |

As you can see Q and P is only true if Q = True and P = True.

In programming, we can use an if condition to preform a condition
if a given proposition is true.

if Q and P then R

R is performed if both Q and P are true.

This is written in code like so...

#+begin_src js
if(Q && P) {
    // Code R here if both conditions are fulfilled
}
#+end_src

- Logical OR (||)
Logical OR is represented with two vertical lines (||).
We can illustrate how logical OR works with a truth table.

| Q | P | Q OR P |
| T | T | T      |
| T | F | T      |
| F | T | T      |
| F | F | F      |

Only one condition needs to be fulfilled in the proposition for the OR operation to be true.

In code...
#+begin_src js
if(Q || P) {
    // Code R here if both conditions are fulfilled
}
#+end_src

- Aside of on if statements...
If you are just writing if statements you can write an else clause if the statement is false
#+begin_src js
if(proposition) {
    // If the proposition is true do this
}
else {
    // If the proposition is false do this
}
#+end_src

You can also make the else statement another if so you can continuously string together conditions...
#+begin_src js
if(proposition) {
    // If the proposition is true do this
}
else if (proposition-two) {
    //...
}
else if (proposition-three ) {
    // ...
} else {
    // If all other propositions are false, do this one
}
#+end_src

Now that you're an expert at logic, let's now work with filter.

Filter is a method that takes a lambda function. The lambda function must return either true or false (a boolean value).

Filter will create an array consisting exclusively of the values that returned true.

Let's great an array and lambda expression
#+begin_src js
const filterMe = [10, 20, 30, 40, 50]

const greaterThan30 = num => num > 30
#+end_src

filterMe is an array of numbers.
We also now have a function that will return true if a given number is greater than 30.

Let's filter filterMe to create a new array consitsting of numbers greater than 30.

#+begin_src js
const theResult = filterMe.filter(greaterThan30)
#+end_src

Voila! That's all you need to get started with your project.

If you're confused at all, feel free to ask your instructor.
